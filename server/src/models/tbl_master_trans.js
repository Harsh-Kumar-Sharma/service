const { TBL_MASTER_TRANS } = require('../config/tables')
module.exports = (sequelize, DataTypes) => {
    return sequelize.define(
        TBL_MASTER_TRANS,
        {
            LANE_TRANS_ID: { type: DataTypes.STRING(50), allowNull: false },
            ENTRY_TRANS_ID: { type: DataTypes.STRING(50), allowNull: false },
            EXIT_TRANS_ID: { type: DataTypes.STRING(50), allowNull: false },
            ENTRY_PLAZA_CODE: { type: DataTypes.STRING(50), allowNull: false },
            EXIT_PLAZA_CODE: { type: DataTypes.STRING(50) },
            ENTRY_LANE_ID: { type: DataTypes.STRING(50), allowNull: false },
            EXIT_LANE_ID: { type: DataTypes.STRING(50) },
            TAG: { type: DataTypes.STRING(50) },
            TAG_TID: { type: DataTypes.STRING(50) },
            PAN: { type: DataTypes.STRING(50) },
            TAG_PLATE: { type: DataTypes.STRING(50) },
            VEH_PLATE: { type: DataTypes.STRING(50) },
            TAG_CLASS: { type: DataTypes.STRING(50) },
            ENTRY_AVC_CLASS: { type: DataTypes.STRING(50) },
            EXIT_AVC_CLASS: { type: DataTypes.STRING(50) },
            VEH_CLASS: { type: DataTypes.STRING(50) },
            TOLL_FARE: { type: DataTypes.DECIMAL(6, 0) },
            OW_FARE: { type: DataTypes.DECIMAL(6, 0) },
            ENTRY_PASSAGE_TIME: { type: DataTypes.DATE, allowNull: true },
            EXIT_PASSAGE_TIME: { type: DataTypes.DATE, allowNull: true },
            ENTRY_VEH_IMG: { type: DataTypes.STRING(50) },
            ENTRY_PLATE_IMG: { type: DataTypes.STRING(50) },
            EXIT_VEH_IMG: { type: DataTypes.STRING(50) },
            EXIT_PLATE_IMG: { type: DataTypes.STRING(50) },
            CCH_IS_EXEMPTED: { type: DataTypes.STRING(50) },
            CCH_IS_VIOLATED: { type: DataTypes.STRING(50) },
            PRICE_MODE: { type: DataTypes.STRING(50) },
            CCH_OTHER: { type: DataTypes.STRING(50) },
            CCH_BATCH_ID: { type: DataTypes.STRING(50) },
            MODE: { type: DataTypes.STRING(50) },
            BLACKLIST: { type: DataTypes.BOOLEAN },
            PRO_STATUS: { type: DataTypes.BOOLEAN },
            API_TRANS_STATUS: { type: DataTypes.BOOLEAN },
            ENCODED_DATE: { type: DataTypes.DATE, defaultValue: DataTypes.NOW },
            VALID_ID: { type: DataTypes.INTEGER, allowNull: false, primaryKey: true, autoIncrement: true },
            TOLL_FILE_STATUS: { type: DataTypes.STRING(5) },
            DISTANCE: { type: DataTypes.STRING(50) },
            IS_VIRTUAL: { type: DataTypes.BOOLEAN },
            IS_RESP_RECVD: { type: DataTypes.BOOLEAN },
            JOURNEY_TIME: { type: DataTypes.STRING(50) },
            AVERAGE_SPEED: { type: DataTypes.STRING(50) },
            ALLOWED_SPEED: { type: DataTypes.STRING(50) },
            PAYMENT_TYPE: { type: DataTypes.STRING(50) },
            PAYMENT_SUBTYPE: { type: DataTypes.STRING(50) },
            REVIEWER_ID: { type: DataTypes.STRING(50) },
            RE_VEH_PLATE: { type: DataTypes.STRING(50) },
            RE_VEH_CLASS: { type: DataTypes.INTEGER(4) },
            RE_TIME: { type: DataTypes.DATE },
            RE_COMMENT: { type: DataTypes.STRING(80) },
            TRIP_TYPE: { type: DataTypes.STRING(20) },
            RE_STATUS: { type: DataTypes.BOOLEAN },
            IS_OVER_SPEED: { type: DataTypes.BOOLEAN },
            NIC_STATUS: { type: DataTypes.BOOLEAN },
            REASONS: { type: DataTypes.STRING(50) },
            PENALTY_FARE: { type: DataTypes.INTEGER(4) },
            TOTAL_PENALTY_FARE: { type: DataTypes.INTEGER(4) },
            ERROR_CODES: { type: DataTypes.STRING(10) },
        },
        {
            sequelize,
            timestamps: false,
            freezeTableName: true,
        }
    );
};
